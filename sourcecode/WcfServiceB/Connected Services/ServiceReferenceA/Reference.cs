//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceB.ServiceReferenceA {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceA.IServiceA")]
    public interface IServiceA {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/UpdatePatientFromB", ReplyAction="http://tempuri.org/IServiceA/UpdatePatientFromBResponse")]
        bool UpdatePatientFromB(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/UpdatePatientFromB", ReplyAction="http://tempuri.org/IServiceA/UpdatePatientFromBResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientFromBAsync(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/UpdatePatient", ReplyAction="http://tempuri.org/IServiceA/UpdatePatientResponse")]
        bool UpdatePatient(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/UpdatePatient", ReplyAction="http://tempuri.org/IServiceA/UpdatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientAsync(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/DeletePatient", ReplyAction="http://tempuri.org/IServiceA/DeletePatientResponse")]
        bool DeletePatient(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/DeletePatient", ReplyAction="http://tempuri.org/IServiceA/DeletePatientResponse")]
        System.Threading.Tasks.Task<bool> DeletePatientAsync(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/DeletePatientFromB", ReplyAction="http://tempuri.org/IServiceA/DeletePatientFromBResponse")]
        bool DeletePatientFromB(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/DeletePatientFromB", ReplyAction="http://tempuri.org/IServiceA/DeletePatientFromBResponse")]
        System.Threading.Tasks.Task<bool> DeletePatientFromBAsync(SharedLibray.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/ReadPatient", ReplyAction="http://tempuri.org/IServiceA/ReadPatientResponse")]
        SharedLibray.Patient ReadPatient(ulong ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/ReadPatient", ReplyAction="http://tempuri.org/IServiceA/ReadPatientResponse")]
        System.Threading.Tasks.Task<SharedLibray.Patient> ReadPatientAsync(ulong ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/ReadPatientFromB", ReplyAction="http://tempuri.org/IServiceA/ReadPatientFromBResponse")]
        SharedLibray.Patient ReadPatientFromB(ulong ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/ReadPatientFromB", ReplyAction="http://tempuri.org/IServiceA/ReadPatientFromBResponse")]
        System.Threading.Tasks.Task<SharedLibray.Patient> ReadPatientFromBAsync(ulong ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/CreatePatient", ReplyAction="http://tempuri.org/IServiceA/CreatePatientResponse")]
        SharedLibray.Patient CreatePatient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/CreatePatient", ReplyAction="http://tempuri.org/IServiceA/CreatePatientResponse")]
        System.Threading.Tasks.Task<SharedLibray.Patient> CreatePatientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/CreatePatientFromB", ReplyAction="http://tempuri.org/IServiceA/CreatePatientFromBResponse")]
        SharedLibray.Patient CreatePatientFromB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/CreatePatientFromB", ReplyAction="http://tempuri.org/IServiceA/CreatePatientFromBResponse")]
        System.Threading.Tasks.Task<SharedLibray.Patient> CreatePatientFromBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/getPatients", ReplyAction="http://tempuri.org/IServiceA/getPatientsResponse")]
        SharedLibray.Patient[] getPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/getPatients", ReplyAction="http://tempuri.org/IServiceA/getPatientsResponse")]
        System.Threading.Tasks.Task<SharedLibray.Patient[]> getPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/getPatientsFromB", ReplyAction="http://tempuri.org/IServiceA/getPatientsFromBResponse")]
        SharedLibray.Patient[] getPatientsFromB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/getPatientsFromB", ReplyAction="http://tempuri.org/IServiceA/getPatientsFromBResponse")]
        System.Threading.Tasks.Task<SharedLibray.Patient[]> getPatientsFromBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/ConnectionOK", ReplyAction="http://tempuri.org/IServiceA/ConnectionOKResponse")]
        bool ConnectionOK();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceA/ConnectionOK", ReplyAction="http://tempuri.org/IServiceA/ConnectionOKResponse")]
        System.Threading.Tasks.Task<bool> ConnectionOKAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAChannel : WcfServiceB.ServiceReferenceA.IServiceA, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAClient : System.ServiceModel.ClientBase<WcfServiceB.ServiceReferenceA.IServiceA>, WcfServiceB.ServiceReferenceA.IServiceA {
        
        public ServiceAClient() {
        }
        
        public ServiceAClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UpdatePatientFromB(SharedLibray.Patient patient) {
            return base.Channel.UpdatePatientFromB(patient);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientFromBAsync(SharedLibray.Patient patient) {
            return base.Channel.UpdatePatientFromBAsync(patient);
        }
        
        public bool UpdatePatient(SharedLibray.Patient patient) {
            return base.Channel.UpdatePatient(patient);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientAsync(SharedLibray.Patient patient) {
            return base.Channel.UpdatePatientAsync(patient);
        }
        
        public bool DeletePatient(SharedLibray.Patient patient) {
            return base.Channel.DeletePatient(patient);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePatientAsync(SharedLibray.Patient patient) {
            return base.Channel.DeletePatientAsync(patient);
        }
        
        public bool DeletePatientFromB(SharedLibray.Patient patient) {
            return base.Channel.DeletePatientFromB(patient);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePatientFromBAsync(SharedLibray.Patient patient) {
            return base.Channel.DeletePatientFromBAsync(patient);
        }
        
        public SharedLibray.Patient ReadPatient(ulong ID) {
            return base.Channel.ReadPatient(ID);
        }
        
        public System.Threading.Tasks.Task<SharedLibray.Patient> ReadPatientAsync(ulong ID) {
            return base.Channel.ReadPatientAsync(ID);
        }
        
        public SharedLibray.Patient ReadPatientFromB(ulong ID) {
            return base.Channel.ReadPatientFromB(ID);
        }
        
        public System.Threading.Tasks.Task<SharedLibray.Patient> ReadPatientFromBAsync(ulong ID) {
            return base.Channel.ReadPatientFromBAsync(ID);
        }
        
        public SharedLibray.Patient CreatePatient() {
            return base.Channel.CreatePatient();
        }
        
        public System.Threading.Tasks.Task<SharedLibray.Patient> CreatePatientAsync() {
            return base.Channel.CreatePatientAsync();
        }
        
        public SharedLibray.Patient CreatePatientFromB() {
            return base.Channel.CreatePatientFromB();
        }
        
        public System.Threading.Tasks.Task<SharedLibray.Patient> CreatePatientFromBAsync() {
            return base.Channel.CreatePatientFromBAsync();
        }
        
        public SharedLibray.Patient[] getPatients() {
            return base.Channel.getPatients();
        }
        
        public System.Threading.Tasks.Task<SharedLibray.Patient[]> getPatientsAsync() {
            return base.Channel.getPatientsAsync();
        }
        
        public SharedLibray.Patient[] getPatientsFromB() {
            return base.Channel.getPatientsFromB();
        }
        
        public System.Threading.Tasks.Task<SharedLibray.Patient[]> getPatientsFromBAsync() {
            return base.Channel.getPatientsFromBAsync();
        }
        
        public bool ConnectionOK() {
            return base.Channel.ConnectionOK();
        }
        
        public System.Threading.Tasks.Task<bool> ConnectionOKAsync() {
            return base.Channel.ConnectionOKAsync();
        }
    }
}
